"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify that attempting to delete a product without specifying an ID returns an error.","909","Delete Product - Missing ID","","Fri Aug 15 14:19:57 BST 2025","passed","Fri Aug 15 14:19:57 BST 2025","","com.fakeapistoreapi.tests.product.DeleteProductTest","com.fakeapistoreapi.tests.product.DeleteProductTest","deleteProductMissingId"
"This test verifies that all users can be retrieved successfully using the GET /users endpoint.","742","Get All Users","","Fri Aug 15 14:20:16 BST 2025","passed","Fri Aug 15 14:20:17 BST 2025","","com.fakeapistoreapi.tests.user.GetUserTest","com.fakeapistoreapi.tests.user.GetUserTest","getAllUsers"
"Verify that a cart can be created even if optional fields are missing","1571","Create cart with missing optional fields","","Fri Aug 15 14:20:31 BST 2025","passed","Fri Aug 15 14:20:33 BST 2025","","com.fakeapistoreapi.tests.cart.CreateCartTest","com.fakeapistoreapi.tests.cart.CreateCartTest","createCartWithMissingOptionalFields"
"Creating two users with unique data should return different ids","1438","Create two users → different ids","","Fri Aug 15 14:20:14 BST 2025","passed","Fri Aug 15 14:20:16 BST 2025","","com.fakeapistoreapi.tests.user.CreateUserTest","com.fakeapistoreapi.tests.user.CreateUserTest","createTwoValidUsers_shouldReturnDifferentIds"
"Verify the create user response at least has id and is JSON","659","Create user → minimal response contract","","Fri Aug 15 14:20:13 BST 2025","passed","Fri Aug 15 14:20:14 BST 2025","","com.fakeapistoreapi.tests.user.CreateUserTest","com.fakeapistoreapi.tests.user.CreateUserTest","createUser_minimalContract_shouldHold"
"This test verifies that a user fetched by ID contains all required fields.","2403","Get User Field Validation","","Fri Aug 15 14:20:17 BST 2025","broken","Fri Aug 15 14:20:19 BST 2025","","com.fakeapistoreapi.tests.user.GetUserTest","com.fakeapistoreapi.tests.user.GetUserTest","getUserFieldValidation"
"Content-Type header should include application/json.","769","Login: Content-Type contains application/json","","Fri Aug 15 14:19:42 BST 2025","passed","Fri Aug 15 14:19:43 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","contentTypeIsJson"
"Verify retrieving a valid cart by ID returns 200 and correct cart details","620","Get Cart by Valid ID","","Fri Aug 15 14:20:23 BST 2025","passed","Fri Aug 15 14:20:24 BST 2025","","com.fakeapistoreapi.tests.cart.GetCartTest","com.fakeapistoreapi.tests.cart.GetCartTest","getCartByValidId"
"Verify that the API returns an ID after creating a product","1747","Create Product - ID Returned","","Fri Aug 15 14:19:59 BST 2025","passed","Fri Aug 15 14:20:00 BST 2025","","com.fakeapistoreapi.tests.product.CreateProductTest","com.fakeapistoreapi.tests.product.CreateProductTest","createProductReturnsId"
"Multiple logins with same valid credentials should each return a token.","1713","Login: repeat login returns token","","Fri Aug 15 14:19:44 BST 2025","passed","Fri Aug 15 14:19:45 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","repeatLoginReturnsToken"
"This test verifies that fetching a user with an invalid ID returns 404 Not Found.","639","Get Non-Existent User","","Fri Aug 15 14:20:19 BST 2025","failed","Fri Aug 15 14:20:20 BST 2025","","com.fakeapistoreapi.tests.user.GetUserTest","com.fakeapistoreapi.tests.user.GetUserTest","getNonExistentUser"
"Verify that creating a product with a different category still works","646","Create Product - Different Category","","Fri Aug 15 14:20:00 BST 2025","passed","Fri Aug 15 14:20:01 BST 2025","","com.fakeapistoreapi.tests.product.CreateProductTest","com.fakeapistoreapi.tests.product.CreateProductTest","createProductWithDifferentCategory"
"Verify that deleting a non-existing cart still returns 200 OK in FakeStoreAPI","711","Delete Cart - Non-existing Cart","","Fri Aug 15 14:20:22 BST 2025","passed","Fri Aug 15 14:20:22 BST 2025","","com.fakeapistoreapi.tests.cart.DeleteCartTest","com.fakeapistoreapi.tests.cart.DeleteCartTest","deleteNonExistingCart"
"Verify that updating a product with wrong data types in fields returns status 400.","660","Update fails with invalid data types in payload","","Fri Aug 15 14:19:52 BST 2025","failed","Fri Aug 15 14:19:52 BST 2025","","com.fakeapistoreapi.tests.product.UpdateProductTest","com.fakeapistoreapi.tests.product.UpdateProductTest","updateProductInvalidDataTypes"
"Verify retrieving all carts returns 200 and a non-empty list","565","Get All Carts","","Fri Aug 15 14:20:24 BST 2025","passed","Fri Aug 15 14:20:25 BST 2025","","com.fakeapistoreapi.tests.cart.GetCartTest","com.fakeapistoreapi.tests.cart.GetCartTest","getAllCarts"
"Invalid username should return 401 Unauthorized","728","testInvalidUsername()","","Fri Aug 15 14:19:48 BST 2025","passed","Fri Aug 15 14:19:48 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","testInvalidUsername"
"Use TestDataUtil to create a user and return its id for downstream tests","784","Ensure dynamic user exists","","Fri Aug 15 14:20:14 BST 2025","passed","Fri Aug 15 14:20:14 BST 2025","","com.fakeapistoreapi.tests.user.CreateUserTest","com.fakeapistoreapi.tests.user.CreateUserTest","ensureDynamicUserExists"
"Verify that an existing cart can be successfully deleted","2028","Delete Cart - Existing Cart","","Fri Aug 15 14:20:20 BST 2025","passed","Fri Aug 15 14:20:22 BST 2025","","com.fakeapistoreapi.tests.cart.DeleteCartTest","com.fakeapistoreapi.tests.cart.DeleteCartTest","deleteExistingCart"
"Verify that updating a user with invalid data returns a bad request","1303","Update user with invalid data","","Fri Aug 15 14:20:06 BST 2025","failed","Fri Aug 15 14:20:07 BST 2025","","com.fakeapistoreapi.tests.user.UpdateUserTest","com.fakeapistoreapi.tests.user.UpdateUserTest","updateUserWithInvalidData"
"Verify that retrieving a product by a valid ID returns status code 200 and correct product details.","524","Get product by valid ID","","Fri Aug 15 14:19:50 BST 2025","passed","Fri Aug 15 14:19:50 BST 2025","","com.fakeapistoreapi.tests.product.GetProductTest","com.fakeapistoreapi.tests.product.GetProductTest","getProductByValidId"
"Verify that deleting a non-existent product returns an error status code.","641","Delete Product - Invalid Product ID","","Fri Aug 15 14:19:55 BST 2025","failed","Fri Aug 15 14:19:56 BST 2025","","com.fakeapistoreapi.tests.product.DeleteProductTest","com.fakeapistoreapi.tests.product.DeleteProductTest","deleteProductWithInvalidId"
"Invalid password should return 401 (this will fail with FakeStoreAPI)","719","Invalid password returns 401","","Fri Aug 15 14:19:45 BST 2025","failed","Fri Aug 15 14:19:46 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","invalidPasswordShouldFail"
"POST /users with a valid payload should return 200/201 and include an id","862","Create user → returns 2xx and id","","Fri Aug 15 14:20:12 BST 2025","passed","Fri Aug 15 14:20:13 BST 2025","","com.fakeapistoreapi.tests.user.CreateUserTest","com.fakeapistoreapi.tests.user.CreateUserTest","createValidUser_shouldReturn2xxAndId"
"Verify that an existing cart can be updated with valid product data.","-133443","Update Cart Successfully","","Fri Aug 15 14:20:29 BST 2025","failed","Fri Aug 15 14:18:15 BST 2025","","com.fakeapistoreapi.tests.cart.UpdateCartTest","com.fakeapistoreapi.tests.cart.UpdateCartTest","updateCartSuccessfully"
"Verify that retrieving a product by an invalid ID returns status code 404.","655","Get product by invalid ID","","Fri Aug 15 14:19:49 BST 2025","failed","Fri Aug 15 14:19:50 BST 2025","","com.fakeapistoreapi.tests.product.GetProductTest","com.fakeapistoreapi.tests.product.GetProductTest","getProductByInvalidId"
"Verify that an existing user can be updated successfully","4633","Update user with valid data","","Fri Aug 15 14:20:07 BST 2025","passed","Fri Aug 15 14:20:12 BST 2025","","com.fakeapistoreapi.tests.user.UpdateUserTest","com.fakeapistoreapi.tests.user.UpdateUserTest","updateUserWithValidData"
"Verify that deleting a user twice returns 404 the second time","2200","Delete a user twice","","Fri Aug 15 14:20:03 BST 2025","failed","Fri Aug 15 14:20:06 BST 2025","","com.fakeapistoreapi.tests.user.DeleteUserTest","com.fakeapistoreapi.tests.user.DeleteUserTest","deleteUserTwice"
"Verify that deleting a product with a non-numeric ID returns a 400 Bad Request or 404 Not Found.","587","Delete Product - Non-numeric Product ID","","Fri Aug 15 14:19:57 BST 2025","passed","Fri Aug 15 14:19:58 BST 2025","","com.fakeapistoreapi.tests.product.DeleteProductTest","com.fakeapistoreapi.tests.product.DeleteProductTest","deleteProductWithNonNumericId"
"Verify that a product can be successfully deleted using its valid ID.","534","Delete Product - Valid Product ID","","Fri Aug 15 14:19:56 BST 2025","passed","Fri Aug 15 14:19:57 BST 2025","","com.fakeapistoreapi.tests.product.DeleteProductTest","com.fakeapistoreapi.tests.product.DeleteProductTest","deleteProductWithValidId"
"Verify that deleting a non-existing user returns 404 Not Found","770","Delete a non-existing user","","Fri Aug 15 14:20:03 BST 2025","failed","Fri Aug 15 14:20:03 BST 2025","","com.fakeapistoreapi.tests.user.DeleteUserTest","com.fakeapistoreapi.tests.user.DeleteUserTest","deleteNonExistingUser"
"Verify that updating a non-existent user returns a 404 Not Found","541","Update non-existent user","","Fri Aug 15 14:20:06 BST 2025","failed","Fri Aug 15 14:20:06 BST 2025","","com.fakeapistoreapi.tests.user.UpdateUserTest","com.fakeapistoreapi.tests.user.UpdateUserTest","updateNonExistentUser"
"Verify that updating a cart with invalid product data returns 400 Bad Request.","2483","Update Cart with Invalid Data","","Fri Aug 15 14:20:26 BST 2025","failed","Fri Aug 15 14:20:29 BST 2025","","com.fakeapistoreapi.tests.cart.UpdateCartTest","com.fakeapistoreapi.tests.cart.UpdateCartTest","updateCartWithInvalidData"
"Verify that an existing user can be deleted successfully","1567","Delete an existing user","","Fri Aug 15 14:20:01 BST 2025","passed","Fri Aug 15 14:20:03 BST 2025","","com.fakeapistoreapi.tests.user.DeleteUserTest","com.fakeapistoreapi.tests.user.DeleteUserTest","deleteExistingUser"
"Response time for valid login should be under 5 seconds.","960","Login: response time < 5s","","Fri Aug 15 14:19:43 BST 2025","passed","Fri Aug 15 14:19:44 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","responseTimeUnder5Seconds"
"Verify retrieving carts for a valid user ID returns 200","645","Get Carts by User ID","","Fri Aug 15 14:20:24 BST 2025","passed","Fri Aug 15 14:20:24 BST 2025","","com.fakeapistoreapi.tests.cart.GetCartTest","com.fakeapistoreapi.tests.cart.GetCartTest","getCartsByUserId"
"Verify that attempting to delete a product that was already deleted returns an error.","1318","Delete Product - Already Deleted","","Fri Aug 15 14:19:54 BST 2025","failed","Fri Aug 15 14:19:55 BST 2025","","com.fakeapistoreapi.tests.product.DeleteProductTest","com.fakeapistoreapi.tests.product.DeleteProductTest","deleteProductTwice"
"Token should not be null or empty for valid credentials.","917","Login: token not null/empty","","Fri Aug 15 14:19:41 BST 2025","passed","Fri Aug 15 14:19:42 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","tokenNotNullOrEmpty"
"Verify that updating a product using a non-existent or invalid product ID returns status 404.","473","Update fails with invalid product ID","","Fri Aug 15 14:19:51 BST 2025","failed","Fri Aug 15 14:19:52 BST 2025","","com.fakeapistoreapi.tests.product.UpdateProductTest","com.fakeapistoreapi.tests.product.UpdateProductTest","updateProductInvalidId"
"Valid login should return 201 and a non-empty token.","4605","Login: 201 + token for valid credentials","","Fri Aug 15 14:19:36 BST 2025","passed","Fri Aug 15 14:19:41 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","validLoginReturnsToken"
"Invalid username should return 401 (this will fail with FakeStoreAPI)","719","Invalid username returns 401","","Fri Aug 15 14:19:46 BST 2025","failed","Fri Aug 15 14:19:47 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","invalidUsernameShouldFail"
"Verify that updating only certain fields of a product works as expected and leaves other fields unchanged.","594","Successfully update only some fields of an existing product","","Fri Aug 15 14:19:53 BST 2025","passed","Fri Aug 15 14:19:53 BST 2025","","com.fakeapistoreapi.tests.product.UpdateProductTest","com.fakeapistoreapi.tests.product.UpdateProductTest","partialUpdateProduct"
"Verify that updating a cart with an empty product list returns 400 Bad Request.","136286","Update Cart with Empty Product List","","Fri Aug 15 14:18:15 BST 2025","failed","Fri Aug 15 14:20:31 BST 2025","","com.fakeapistoreapi.tests.cart.UpdateCartTest","com.fakeapistoreapi.tests.cart.UpdateCartTest","updateCartWithEmptyProductList"
"Verify that retrieving all products returns status code 200 and a non-empty list.","836","Get all products","","Fri Aug 15 14:19:48 BST 2025","passed","Fri Aug 15 14:19:49 BST 2025","","com.fakeapistoreapi.tests.product.GetProductTest","com.fakeapistoreapi.tests.product.GetProductTest","getAllProducts"
"Verify that a new valid cart can be created successfully","1466","Create a valid cart","","Fri Aug 15 14:20:33 BST 2025","passed","Fri Aug 15 14:20:34 BST 2025","","com.fakeapistoreapi.tests.cart.CreateCartTest","com.fakeapistoreapi.tests.cart.CreateCartTest","createValidCart"
"Verify that updating an existing product with valid details returns status 200 and correct updated fields.","624","Successfully update an existing product","","Fri Aug 15 14:19:53 BST 2025","passed","Fri Aug 15 14:19:54 BST 2025","","com.fakeapistoreapi.tests.product.UpdateProductTest","com.fakeapistoreapi.tests.product.UpdateProductTest","updateProductWithValidData"
"Invalid password should return 401 Unauthorized","795","testInvalidPassword()","","Fri Aug 15 14:19:47 BST 2025","passed","Fri Aug 15 14:19:48 BST 2025","","com.fakeapistoreapi.tests.auth.LoginTest","com.fakeapistoreapi.tests.auth.LoginTest","testInvalidPassword"
"Verify that updating a non-existent cart returns 404 Not Found.","1234","Update Non-Existent Cart","","Fri Aug 15 14:20:25 BST 2025","failed","Fri Aug 15 14:20:26 BST 2025","","com.fakeapistoreapi.tests.cart.UpdateCartTest","com.fakeapistoreapi.tests.cart.UpdateCartTest","updateNonExistentCart"
"Verify that a product can be successfully created with valid data","628","Create Product - Valid Data","","Fri Aug 15 14:19:58 BST 2025","failed","Fri Aug 15 14:19:59 BST 2025","","com.fakeapistoreapi.tests.product.CreateProductTest","com.fakeapistoreapi.tests.product.CreateProductTest","createProductWithValidData"
"Verify that updating a product without mandatory fields returns status 400.","585","Update fails when required fields are missing","","Fri Aug 15 14:19:52 BST 2025","failed","Fri Aug 15 14:19:53 BST 2025","","com.fakeapistoreapi.tests.product.UpdateProductTest","com.fakeapistoreapi.tests.product.UpdateProductTest","updateProductMissingFields"
"Verify that deleting a cart with invalid ID format returns 404 Not Found","624","Delete Cart - Invalid ID Format","","Fri Aug 15 14:20:22 BST 2025","failed","Fri Aug 15 14:20:23 BST 2025","","com.fakeapistoreapi.tests.cart.DeleteCartTest","com.fakeapistoreapi.tests.cart.DeleteCartTest","deleteCartWithInvalidId"
"Verify that retrieving products with a limit parameter returns only the specified number of products.","611","Get products with a limit parameter","","Fri Aug 15 14:19:50 BST 2025","passed","Fri Aug 15 14:19:51 BST 2025","","com.fakeapistoreapi.tests.product.GetProductTest","com.fakeapistoreapi.tests.product.GetProductTest","getProductsWithLimit"
